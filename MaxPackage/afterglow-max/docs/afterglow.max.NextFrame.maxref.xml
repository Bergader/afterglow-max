<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<c74object name="afterglow.max.NextFrame" module="max" category="afterglow-max, DMX Light Shows">
  <digest>
    Provide information to prepare for the next Afterglow frame
  </digest>
	
  <description>
    Gives advance warning about exactly when Afterglow is going to
    calculate and send the next frame of control values to the lights,
    so cue variables and other context can be prepared for that
    process. Starts and stops the light show in response to incoming
    <m>start</m> and <m>stop</m> messages.
    <br/>
    <br/>

    (See the <openfilelink
    filename="afterglow.max.setup.maxvig.xml">Getting
    Started</openfilelink> guide if you have not yet configured
    everything afterglow-max needs to create a light show. Also note
    that if you want to coordinate visualizations and other effects
    within Max that run their own timing sources, but which you want
    to respond to the current musical time that is in effect within an
    Afterglow light show, you are likely better off using a
    <openfilelink
    filename="afterglow.max.Metro.maxhelp">Metro</openfilelink>
    object, and sending it bangs at the intervals that your patch
    wants to update its state, rather than being driven by the timing
    source of the show itself the way the NextFrame object is.)
    <br/>
    <br/>

    Sending a <m>start</m> message to the inlet makes sure that the
    show's <a
    href="https://github.com/brunchboy/afterglow/blob/master/doc/rendering_loop.adoc#the-rendering-loop">Rendering
    Loop</a> is active, and generating control signals to the
    associated lighting universes. A <m>stop</m> message has the
    opposite effect, shutting down an active show, and blacking out
    the lighting universes. Sending a <m>bang</m> toggles between
    these two states.
    <br/>
    <br/>

    Whenever the show is running, as soon as Afterglow has decided
    when the next frame will occur, the leftmost outlet sends a
    <m>list</m> containing three <m>int</m> values, which identify the
    phrase, bar within that phrase, and beat within that bar, during
    which the frame will occur. (These values are calculated by the <a
    href="https://github.com/brunchboy/afterglow/blob/master/doc/metronomes.adoc#metronomes">Metronome</a>
    attached to the show.)
    <br/>
    <br/>

    The middle outlet sends a <m>list</m> containing the <i>phases</i>
    that will have been reached within the phrase, bar, and beat.
    Phases are <m>float</m> values that range from 0.0, at the very
    start of the interval, approaching (but never quite reaching) 1.0,
    as the next interval approaches. Once the next beat, bar, or
    phrase starts, of course, the phase returns to zero. Phases are
    very useful for generating effects; the Help patcher for this
    object shows how to use the beat phase to desaturate a cue over
    the duration of each beat. (You can do this all in Clojure code
    within Afterglow itself, of course, but the purpose of this object
    is to let you achieve the same kinds of results within Max,
    without writing Clojure code, and using cool tools and integration
    opportunities that the Max environment gives you.)
    <br/>
    <br/>

    The right outlet sends a <m>list</m> containing the current BPM of the
    metronome (a <m>float</m>), the number of beats in each bar, and the
    number of bars in each phrase (both <m>int</m> values).
    <br/>
    <br/>

    The NextFrame object takes no arguments. It will send messages
    whenever the show is running.
  </description>
	
  <!--METADATA-->
  <metadatalist>
    <metadata name="author">James Elliott, Deep Symmetry, LLC</metadata>
    <metadata name="tag">DeepSymmetry</metadata>
    <metadata name="tag">DMX</metadata>
    <metadata name="tag">mxj</metadata>
    <metadata name="tag">Light Shows</metadata>
  </metadatalist>
	
  <!--INLETS-->
  <inletlist>
    <inlet id="0" type="list">
      <digest>start, stop, bang: control show</digest>
    </inlet>
  </inletlist>

  <!--OUTLETS-->
  <outletlist>
    <outlet id="0" type="list">
      <digest>phrase, bar, beat</digest>
    </outlet>
    <outlet id="1" type="list">
      <digest>phrase phase, bar phase, beat phase</digest>
    </outlet>
    <outlet id="2" type="list">
      <digest>BPM, beats/bar, bars/phase</digest>
    </outlet>
  </outletlist>
	
  <!--ARGUMENTS-->
  <objarglist>
  </objarglist>
	
  <!--MESSAGES-->
  <methodlist>
    <method name="bang">
      <arglist />
      <digest>
        Toggle show running state
      </digest>
      <description>
        If the show is running, acts like a <m>stop</m> message and
        shuts it down. Otherwise acts like a <m>start</m> message and
        starts it.
      </description>
    </method>
    <method name="start">
      <arglist />
      <digest>
	Start the show rendering loop
      </digest>
      <description>
        Ensures that the show's <a
    href="https://github.com/brunchboy/afterglow/blob/master/doc/rendering_loop.adoc#the-rendering-loop">Rendering
        Loop</a> is active and generating control signals to the
        associated lighting universes.
      </description>
    </method>
    <method name="stop">
      <arglist />
      <digest>
	Stop the show
      </digest>
      <description>
        Shuts down the show's <a
    href="https://github.com/brunchboy/afterglow/blob/master/doc/rendering_loop.adoc#the-rendering-loop">Rendering
        Loop</a> if it was active, and blacks out all associated
        lighting universes.
      </description>
    </method>
  </methodlist>
	
  <!--SEEALSO-->
  <seealsolist>
    <seealso name="afterglow.max.Cue"/>
    <seealso name="afterglow.max.Eval"/>
    <seealso name="afterglow.max.Metro"/>
    <seealso name="afterglow.max.Var"/>
  </seealsolist>
</c74object>
